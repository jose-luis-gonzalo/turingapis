{
  "swagger" : "2.0",
  "info" : {
    "description" : "\nThis API manages the customer resource. It enables the retrieval of customer along with engaged party, related party,accounts, payment method and credit profile.  In addition, the API enables to create, delete, and modify customer\n\n###### Compliant with TMF629_Customer_Management_API_REST_Specification_R17.0.1\n",
    "version" : "1.0",
    "title" : "Customer Management - Customer",
    "contact" : {
      "name" : "Amdocs Inc.",
      "url" : "http://www.amdocs.com",
      "email" : "support@amdocs.com"
    },
    "license" : {
      "name" : "Amdocs Inc.",
      "url" : "http://"
    },
    "x-amdocs" : {
      "service-principals" : [ "customer-customer-app-id" ]
    },
    "x-dox-Updated" : "2017-01-31 17:10"
  },
  "host" : "example.com",
  "basePath" : "/customerManagement/v1",
  "schemes" : [ "https" ],
  "paths" : {
    "/customer" : {
      "post" : {
        "tags" : [ "Customer" ],
        "summary" : "Create a customer",
        "description" : "This operation creates an customer along with it's related entities\n\n###### TMF Open API compliant\n**Mandatory&#58;**\n\nIf engagedParty is of type \"PartyRef\" then following fields are mandatory \n  - engagedParty.id\n  - engagedParty.type\n  - name \n  \nIf engagedParty is of type \"IndividualValue\" then following fields are mandatory\n  - engagedParty.type\n  - engagedParty.givenName\n  - engagedParty.familiyName\n          \n\nAt sub entity level following fields are mandatory\n- account\n  - id\n  - referredType\n- paymentMethod\n  - id\n- characteristic\n  - name\n  - value\n- creditProfile\n  - creditProfileDate\n  - validFor\n- relatedParty\n   - id\n   - referredType\n- contactMedium.type=\"email\"\n  - contactMedium.medium.type\n  - contactMedium.medium.emailAddress\n- contactMedium.type=\"telephone\"\n  - medium.type\n  - medium.number\n- contactMedium.type=\"postal address\"\n  - medium.type\n  - medium.street1\n  - medium.street2\n  - medium.city\n  - medium.stateOrProvince\n  - medium.postCode\n  - medium.country\n\n**Readonly&#58;**\n  - id\n  - href\n  - relatedParty.name\n  - relatedParty.href\n  - engagedParty.href\n\n\n**Business rules&#58;**\n- This operation supports ReferenceOrValue pattern in the input for following relations. In the output the operation always return references to related entities. \n  1. ***engagedParty*** - can accept either PartyRef or IndividualValue as a type \n    a. PartyRef -  Operation will create and associate the customer with given Individual\n    b. IndividualValue - Operation will create following entities and associate the customer with them \n      1. Customer \n         a. if name of the customer is not provided then it would be derived from individual formatted name\n      2. Individual \n         a. if individual already exist based on individual uniquness , operation will throw an error\n          \n      3. Financial Account\n         a. New financial account will be created\n      4. Billing Account\n         a. New billing account will be created and will be associated with financial account\n      \n  2. ***account*** - can accept either AccountRef,FinancialAccountValue or BillingAccountValue type\n    a. AccountRef - Operation will associate the customer with given financial account or billing account.\n    b. FinancialAccountValue - Operation will create a new financial account with given details.\n    c. BillingAccountValue - Operation will create new billing account with given details.\n  \n\n**Reference value&#58;**\n- account.type (CustomerManagementRefData:accountType)\n- contactMedium.type (CustomerManagementRefData:contactMediumType)\n- status (CustomerManagementRefData:customerStatus)\n- customerSubType (CustomerManagementRefData:customerSubType)\n- customerType (CustomerManagementRefData:customerType)\n- contactMedium.characteristic.type (CustomerManagementRefData:mediumType)\n- relatedParty.role(CustomerManagementRefData:relatedPartyRole)\n- relatedParty.type(CustomerManagementRefData:partyType)\n\n**Default behaviour&#58;**\nWhen engagedParty is of type IndividualValue\n1. If contact medium for customer are not specified then by default the contact medium of engaged party will be copied to customer\n2. If contact medium for customer are specified and contact medium of engagedParty is not specified then by default the contact medium of customer will be copied to engaged party (Individual)\n3. If contact medium and name for financial account or billing account  are not specified a by default then contact medium of customer will be copied to financial account\n\nFor reference data fields if the value is not specified then the default value specified in reference data list will be stored in entity.\n \n",
        "operationId" : "createCustomer",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "Accept-Language",
          "in" : "header",
          "description" : "The locale of the client\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "salesChannel",
          "in" : "query",
          "description" : "Sales Channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "Customer",
          "description" : "Customer details\n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Customer"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "*Created* - Customer got created successfully.\n      \n",
            "examples" : {
              "application/json" : {
                "id" : "Customer_10514540-0455-4177-a22a-280008a20006",
                "href" : "http://server/customerManagement/v1/customer/Customer_10514540-0455-4177-a22a-280008a20006",
                "name" : "ReshuK",
                "status" : "string",
                "statusReason" : "statusReason",
                "validFor" : {
                  "startDateTime" : "2017-08-18T12:16:47.448Z",
                  "endDateTime" : "2017-08-18T12:16:47.448Z"
                },
                "characteristic" : [ {
                  "name" : "Amit8182_characteristic",
                  "value" : "Reading"
                } ],
                "engagedParty" : {
                  "type" : "PartyRef",
                  "id" : "Individual_11040544-4114-402a-82a0-2a8a2a2a0aa8",
                  "href" : "http://server/partyManagement/v1/individual/Individual_11040544-4114-402a-82a0-2a8a2a2a0aa8",
                  "name" : "givenName4712 middleName familyName6817"
                },
                "relatedParty" : [ {
                  "id" : "Individual_11040544-4114-402a-82a0-2a8a2a2a0aa8",
                  "href" : "http://server/v1/individual/Individual_11040544-4114-402a-82a0-2a8a2a2a0aa8",
                  "name" : "givenName4712 middleName familyName6817",
                  "role" : "Primary",
                  "type" : "Customer",
                  "validFor" : {
                    "startDateTime" : "2017-08-18T12:16:47.448Z",
                    "endDateTime" : "2017-08-18T12:16:47.448Z"
                  }
                }, {
                  "id" : "Individual_11540545-0401-402c-8800-88282a8808a9",
                  "href" : "http://server/partyManagement/v1/individual/Individual_11540545-0401-402c-8800-88282a8808a9",
                  "name" : "Prashant Sam David",
                  "role" : "Secondary",
                  "type" : "Customer",
                  "validFor" : {
                    "startDateTime" : "1980-08-18T12:16:47.448Z",
                    "endDateTime" : "2017-08-18T12:16:47.448Z"
                  }
                } ],
                "account" : [ {
                  "type" : "FinancialAccount",
                  "id" : "FinancialAccount_00144114-5550-4172-8a2a-a80a808a08a1",
                  "href" : "http://server/v1/financialAccount/FinancialAccount_00144114-5550-4172-8a2a-a80a808a08a1",
                  "name" : "Reshu",
                  "preferred" : false
                }, {
                  "type" : "BillingAccount",
                  "id" : "BillingAccount_04400405-0555-4434-aa08-a08000020222",
                  "href" : "http://server/v1/billingAccount/BillingAccount_04400405-0555-4434-aa08-a08000020222",
                  "name" : "Reshu",
                  "preferred" : true
                } ],
                "paymentMethod" : [ ],
                "creditProfile" : [ ],
                "contactMedium" : [ {
                  "id" : "Customer_10514540-0455-4177-a22a-280008a20006_ContactMedium_14454551-0111-4427-80aa-0a880008002e",
                  "type" : "Email",
                  "preferred" : true,
                  "validFor" : {
                    "startDateTime" : "2017-08-18T12:16:47.448Z",
                    "endDateTime" : "2017-08-18T12:16:47.448Z"
                  },
                  "characteristic" : {
                    "type" : "Business",
                    "emailAddress" : "Auto2088@amdocs.com",
                    "number" : 917898,
                    "city" : "Pune",
                    "country" : "India",
                    "postCode" : "12345",
                    "stateOrProvince" : "CA",
                    "street1" : "Street1",
                    "street2" : "Street2",
                    "postOfficeBox" : "PO",
                    "room" : "300",
                    "floor" : "1",
                    "buildingName" : "Italia",
                    "streetName" : "Laxmi",
                    "streetNumber" : "StreetNumber",
                    "town" : "Town",
                    "status" : "Status",
                    "longitude" : "tt",
                    "latitude" : "tt",
                    "externalId" : "111"
                  }
                } ],
                "customerType" : "Residential",
                "customerSubType" : "Individual",
                "acquisitionDate" : "2017-10-25T05:57:48.843Z",
                "description" : "nothing to describe",
                "rank" : 0
              }
            },
            "headers" : {
              "Etag" : {
                "type" : "string",
                "description" : "entity tag\n",
                "x-dox-Since" : 1
              }
            },
            "schema" : {
              "$ref" : "#/definitions/Customer"
            }
          },
          "400" : {
            "description" : "*Bad Request* - The server cannot process the request due to malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.      \n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "409" : {
            "description" : "*Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.\nwith the current state of the resource.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "*Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.\nclient request.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "502" : {
            "description" : "*Bad Gateway* - The server encountered an unexpected condition when calling another service.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "503" : {
            "description" : "*Service Unavailable* - The server cannot fulfill the request due to a temporary overloading or maintenance of the server. Retry later.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "x-amdocs" : {
          "public-roles" : [ "D1_CustomerManagement_createCustomer" ]
        }
      }
    },
    "/customer/{customerId}" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "Retrieve a customer",
        "description" : "This operation retrieves a customer\nThe embed option is supported for engagedParty (?embed=[engagedParty])\n   \n",
        "operationId" : "getCustomer",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer id\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Accept-Language",
          "in" : "header",
          "description" : "The locale of the client\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "salesChannel",
          "in" : "query",
          "description" : "Sales Channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "embed",
          "in" : "query",
          "description" : "embed.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "*OK* - The customer was retrieved successfully.\n",
            "headers" : {
              "Etag" : {
                "type" : "string",
                "description" : "entity tag\n",
                "x-dox-Since" : 1
              }
            },
            "schema" : {
              "$ref" : "#/definitions/Customer"
            }
          },
          "400" : {
            "description" : "*Bad Request* - The server cannot process the request due to malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.      \n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "*Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid WEB resource, and so on.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "409" : {
            "description" : "*Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.\nwith the current state of the resource.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "*Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.\nclient request.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "502" : {
            "description" : "*Bad Gateway* - The server encountered an unexpected condition when calling another service.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "503" : {
            "description" : "*Service Unavailable* - The server cannot fulfill the request due to a temporary overloading or maintenance of the server. Retry later.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "x-amdocs" : {
          "public-roles" : [ "D1_CustomerManagement_getCustomer" ]
        }
      },
      "delete" : {
        "tags" : [ "Customer" ],
        "summary" : "Delete a customer",
        "description" : "This operation deletes a customer. This operation is supposed to be used for internal purpose in specific cleanup scenarios for example cleanup customer when microservice data is replicated to master system.\n",
        "operationId" : "deleteCustomer",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer id\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Accept-Language",
          "in" : "header",
          "description" : "The locale of the client\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "The If-Match HTTP request header makes the request conditional. \nFor GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \nFor PUT and other non-safe methods, it will only upload the resource in this case\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "salesChannel",
          "in" : "query",
          "description" : "Sales Channel.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "*OK* - Customer deleted successfully.\n"
          },
          "400" : {
            "description" : "*Bad Request* - The server cannot process the request due to malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.      \n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "*Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid WEB resource, and so on.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "409" : {
            "description" : "*Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.\nwith the current state of the resource.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "*Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.\nclient request.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "502" : {
            "description" : "*Bad Gateway* - The server encountered an unexpected condition when calling another service.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "x-amdocs" : null
      },
      "patch" : {
        "tags" : [ "Customer" ],
        "summary" : "Patch a customer",
        "description" : "This operation allows partial updates to customer resource.\n\n###### TMF Open API compliant\n**Patchable elements&#58;**\n- name: (replace,remove)\n- status: (replace,remove) \n- displayStatus: (replace,remove)\n- statusReason: (replace,remove)\n- validFor: (replace,remove)\n- validFor.startDateTime: (replace,remove)\n- validFor.endDateTime: (replace,remove)\n- characteristic: add,(replace,remove)\n- characteristic.name: (replace,remove)\n- characteristic.value: (replace,remove)\n- contactMedium: add,(replace,remove)\n- contactMedium.id: (replace,remove)\n- contactMedium.type: (replace,remove)\n- contactMedium.preferred: (replace,remove)\n- contactMedium.validFor: (replace,remove)\n- contactMedium.validFor.startDateTime: (replace,remove)\n- contactMedium.validFor.endDateTime: (replace,remove)\n- contactMedium.characteristic: (replace,remove)\n- contactMedium.characteristic.type: (replace,remove)\n- contactMedium.characteristic.emailAddress: (replace,remove)\n- contactMedium.characteristic.number: (replace,remove)\n- contactMedium.characteristic.city: (replace,remove)\n- contactMedium.characteristic.country: (replace,remove)\n- contactMedium.characteristic.postCode: (replace,remove)\n- contactMedium.characteristic.stateOrProvince: (replace,remove)\n- contactMedium.characteristic.street1: (replace,remove)\n- contactMedium.characteristic.street2: (replace,remove)\n- contactMedium.characteristic.postOfficeBox: (replace,remove)\n- contactMedium.characteristic.room: (replace,remove)\n- contactMedium.characteristic.floor: (replace,remove)\n- contactMedium.characteristic.buildingName: (replace,remove)\n- contactMedium.characteristic.streetName: (replace,remove)\n- contactMedium.characteristic.town: (replace,remove)\n- contactMedium.characteristic.status: (replace,remove)\n- contactMedium.characteristic.longitude: (replace,remove)\n- contactMedium.characteristic.latitude: (replace,remove)\n- contactMedium.characteristic.externalId: (replace,remove)\n- customerType: (replace,remove)\n- customerSubType: (replace,remove)\n- acquisitionDate: (replace,remove)\n- description: (replace,remove)\n- rank: (replace,remove)\n- extensions: (replace,remove)\n",
        "operationId" : "patchCustomer",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer id\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Accept-Language",
          "in" : "header",
          "description" : "The locale of the client\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "The If-Match HTTP request header makes the request conditional. \nFor GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \nFor PUT and other non-safe methods, it will only upload the resource in this case\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "salesChannel",
          "in" : "query",
          "description" : "Sales Channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "CustomerPatch",
          "description" : "Patch request to update Customer resource\n",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/PatchElement"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "*OK* - Customer updated successfully.\n",
            "headers" : {
              "Etag" : {
                "type" : "string",
                "description" : "entity tag\n",
                "x-dox-Since" : 1
              }
            },
            "schema" : {
              "$ref" : "#/definitions/Customer"
            }
          },
          "400" : {
            "description" : "*Bad Request* - The server cannot process the request due to malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.      \n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "*Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid WEB resource, and so on.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "409" : {
            "description" : "*Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.\nwith the current state of the resource.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "*Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.\nclient request.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "502" : {
            "description" : "*Bad Gateway* - The server encountered an unexpected condition when calling another service.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "x-amdocs" : {
          "public-roles" : [ "D1_CustomerManagement_patchCustomer" ]
        }
      }
    },
    "/customer/{customerId}/addRelatedParty" : {
      "post" : {
        "tags" : [ "Customer" ],
        "summary" : "Associate a party with customer",
        "description" : "This operation associates a party with customer\n\n**Mandatory&#58;**\n- relatedParty.id\n- relatedParty.role\n\n**Reference value&#58;**\n - relatedParty.role(CustomerManagementRefData:relatedPartyRole)\n \n",
        "operationId" : "addRelatedParty",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer id\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Accept-Language",
          "in" : "header",
          "description" : "The locale of the client\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "The If-Match HTTP request header makes the request conditional. \nFor GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \nFor PUT and other non-safe methods, it will only upload the resource in this case\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "salesChannel",
          "in" : "query",
          "description" : "Sales Channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "RelatedParty",
          "description" : "RelatedParty details\n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RelatedPartyRef"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "*OK* - The party is associated with customer successfully.\n",
            "headers" : {
              "Etag" : {
                "type" : "string",
                "description" : "entity tag\n",
                "x-dox-Since" : 1
              }
            },
            "schema" : {
              "$ref" : "#/definitions/Customer"
            }
          },
          "400" : {
            "description" : "*Bad Request* - The server cannot process the request due to malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.      \n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "*Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid WEB resource, and so on.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "409" : {
            "description" : "*Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.\nwith the current state of the resource.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "*Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.\nclient request.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "502" : {
            "description" : "*Bad Gateway* - The server encountered an unexpected condition when calling another service.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "503" : {
            "description" : "*Service Unavailable* - The server cannot fulfill the request due to a temporary overloading or maintenance of the server. Retry later.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "x-amdocs" : {
          "public-roles" : [ "D1_CustomerManagement_addRelatedParty" ]
        }
      }
    },
    "/customer/{customerId}/removeRelatedParty" : {
      "post" : {
        "tags" : [ "Customer" ],
        "summary" : "Disassociate a party from customer",
        "description" : "This operation disassociate a party from customer\n\n\n**Mandatory&#58;**\n- relatedParty.id\n- relatedParty.role\n\n**Reference value&#58;**\n - relatedParty.role(CustomerManagementRefData:relatedPartyRole)\n",
        "operationId" : "removeRelatedParty",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer id\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Accept-Language",
          "in" : "header",
          "description" : "The locale of the client\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "The If-Match HTTP request header makes the request conditional. \nFor GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \nFor PUT and other non-safe methods, it will only upload the resource in this case\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "salesChannel",
          "in" : "query",
          "description" : "Sales Channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "RelatedParty",
          "description" : "RelatedParty details\n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RelatedPartyRef"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "*OK* - The party is disassociated from customer successfully.\n",
            "headers" : {
              "Etag" : {
                "type" : "string",
                "description" : "entity tag\n",
                "x-dox-Since" : 1
              }
            },
            "schema" : {
              "$ref" : "#/definitions/Customer"
            }
          },
          "400" : {
            "description" : "*Bad Request* - The server cannot process the request due to malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.      \n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "*Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid WEB resource, and so on.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "409" : {
            "description" : "*Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.\nwith the current state of the resource.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "500" : {
            "description" : "*Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.\nclient request.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "502" : {
            "description" : "*Bad Gateway* - The server encountered an unexpected condition when calling another service.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "503" : {
            "description" : "*Service Unavailable* - The server cannot fulfill the request due to a temporary overloading or maintenance of the server. Retry later.\n",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        },
        "x-amdocs" : {
          "public-roles" : [ "D1_CustomerManagement_removeRelatedParty" ]
        }
      }
    },
    "/customer/{customerId}/postalAddress" : {
      "get" : {
        "tags" : [ "Customer" ],
        "summary" : "Retrieve postal addresses of customer",
        "description" : "This operation retrieves customer addresses based on the provided filter values.  \n\n**Mandatory&#58;**\n- customerId  - unique identifier of the customer      \n\n**Supported Filters &#58;**\n\naddressType==<value>  -   Represents role of address. Following are fixed set of values which are supported.\n  such as invoice,mailing,service,shipping.\nplace.@referredType == <value>  - PlaceRef.@referredType to search for within the customer\nplace.id == <value> - The value of PlaceRef.id to search for within the customer\nmedium.place.subPlace.id == <value> - The value of SubPlaceRef.id to search for within the customer\nmedium.place.subPlace.@referredType == <value> - The value of SubPlaceRef.@referredType to search for within the customer\n \n**Business rules&#58;**\n  - Operation will iterate over customer entity in order to filter the postal addresses. The related entities such as FA/BA are not traversed for filtering.\n  - The rules for matching address type are driven by ** AddressManagementRefData:addressRole **  reference list. For example if 'Home' address is configured to be allowed as 'Service' address then filter such as 'addressRole=Service' would include the 'Home' address in response.\n    The address role reference list contains the configuration information.\n  \n\n**Reference Data values&#58;**\n- place.@referredType  (Configuration:allowedPlaceRefReferredType)\n- place.subPlace.@referredType(Configuration:allowedSubPlaceRefReferredType)\n\n**Default behaviour&#58;**\n- If filter attributes are not provided then operation will return all the postal addresses of the customer.\n",
        "operationId" : "retrieveCustomerAddress",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer id\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filters",
          "in" : "query",
          "description" : "Query parameter to specify the search filters. Attribute filters are specified in the following way:\n_?filters=([attributeName][operator][value],\\u2026,[value])[&|;]\\u2026[&|;]([attributeName][operator][value],\\u2026,[value])_\n\nSupported operators are:\n* Equality: == (equals), != (not equals)\n* Contains: =@ (contains), !@ (does not contain)\n* Less than: < (less than), <= (less than or equal to)\n* Greater than: > (greater than),  >= (greater than or equal to)\n* RegExp: =~ (match), !~ (does not match)\n\nComma separated values for an attribute are evaluated with OR operator. & is the separator for multiple queries to be evaluated with AND operator while the ; is the separator for multiple queries to be evaluated with OR operator.\n",
          "required" : false,
          "type" : "string",
          "x-dox-Since" : 1.0
        }, {
          "name" : "Accept-Language",
          "in" : "header",
          "description" : "The locale of the client\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "salesChannel",
          "in" : "query",
          "description" : "Sales Channel.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "*OK* - The customer addresses were retrieved successfully.\n",
            "headers" : {
              "Etag" : {
                "type" : "string",
                "description" : "entity tag\n",
                "x-dox-Since" : 1
              }
            },
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/MediumCharacteristic"
              }
            }
          },
          "400" : {
            "description" : "*Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.\n",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "*Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.\n",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "422" : {
            "description" : "*Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.\n",
            "schema" : {
              "$ref" : "#/definitions/ValidationError"
            }
          },
          "500" : {
            "description" : "*Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.\n",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "502" : {
            "description" : "*Bad Gateway* - The server encountered an unexpected condition when calling another service.\n",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "default" : {
            "description" : "*Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.\n",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-amdocs" : {
          "public-roles" : [ "D1_CustomerManagement_retrieveCustomer" ]
        }
      }
    },
    "/customer/{customerId}/addPostalAddress" : {
      "post" : {
        "tags" : [ "Customer" ],
        "summary" : "Associate an address to customer",
        "description" : "This operation associates a postal address to customer with given role. \n\n**Mandatory&#58;**\nplace.id\ntype\n\n**Business rules&#58;**\n\n- The operation will validate the place.id, place.subplace.id\n\n- Operation will support values for some of the attributes as below \n    place.@referredType='GeographicAddress'\n    place.subPlace.@referredType='GeographicSubAddress'\n\n- The operation is idempotent and will result no change to customer resource in case the address already exist on the customer with given type\n\n- The operation will use the place.id and subplace.id for conversion from geographic address to formatted address.\n\n**Reference value&#58;**\n\n - type - PartyManagementRefData:postalAddress\n",
        "operationId" : "addPostalAddress",
        "parameters" : [ {
          "name" : "customerId",
          "in" : "path",
          "description" : "customer id\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Accept-Language",
          "in" : "header",
          "description" : "The locale of the client\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "The If-Match HTTP request header makes the request conditional. \nFor GET and HEAD methods, the server will send back the requested resource only if it matches one of the listed ETags. \nFor PUT and other non-safe methods, it will only upload the resource in this case\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "salesChannel",
          "in" : "query",
          "description" : "Sales Channel.\n",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "Medium",
          "description" : "Customer with added contact medium details\n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MediumCharacteristic"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "*OK* - The address is associated with customer successfully.\n",
            "headers" : {
              "Etag" : {
                "type" : "string",
                "description" : "entity tag\n",
                "x-dox-Since" : 1
              }
            },
            "schema" : {
              "$ref" : "#/definitions/Customer"
            }
          },
          "400" : {
            "description" : "*Bad Request* - The server cannot process the request due to a malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.\n",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "*Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.\n",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "422" : {
            "description" : "*Unprocessable Entity* - The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.\n",
            "schema" : {
              "$ref" : "#/definitions/ValidationError"
            }
          },
          "500" : {
            "description" : "*Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.\n",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "502" : {
            "description" : "*Bad Gateway* - The server encountered an unexpected condition when calling another service.\n",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "default" : {
            "description" : "*Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.\n",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        },
        "x-amdocs" : {
          "public-roles" : [ "D1_CustomerManagement_addPostalAddress" ]
        }
      }
    }
  },
  "definitions" : {
    "Customer" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PartyRole"
      }, {
        "properties" : {
          "customerType" : {
            "type" : "string",
            "description" : "The type of the customer such as Residential/Corporate etc.\n"
          },
          "customerSubType" : {
            "type" : "string",
            "description" : "The sub-type of customer such as Individual/Small Partnership etc.\n"
          },
          "acquisitionDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date of aquisition of the customer\n"
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the customer\n"
          },
          "rank" : {
            "type" : "integer",
            "description" : "The rank of the customer\n"
          },
          "extensions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "properties" : { }
            },
            "x-amdocs" : {
              "refDefinition" : "CustomerExtension"
            }
          }
        }
      } ],
      "description" : "Customer represents a person or organization that buys products and services from the enterprise or receives free offers or services. \nCustomers can also be other service providers who resell the enterprises products, other service providers that lease the enterprise's resources for utilization by the other \nservice provider's products and services, and so forth. Customer resource contains information about the customer. \nMain attributes are its identifier, name, status and validity, description, characteristics, contact medium, related customer account, related party, customer credit profile information.\n"
    },
    "PartyRole" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The unique identifier of customer\n"
        },
        "href" : {
          "type" : "string",
          "description" : "Hypertext reference to the customer\n"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the customer \n",
          "x-dox-pii" : "nameInfo:name"
        },
        "status" : {
          "type" : "string",
          "description" : "The status of customer.\n"
        },
        "statusReason" : {
          "type" : "string",
          "description" : "The text descriing the reason for status change\n"
        },
        "validFor" : {
          "$ref" : "#/definitions/TimePeriod"
        },
        "characteristic" : {
          "type" : "array",
          "description" : "Describes the characteristics of customer such as customer hobbies,center of interest etc. Apart from storage and retrieval no operations such as filtering,sorting etc. will be supported on these v  alues.\n",
          "items" : {
            "$ref" : "#/definitions/Characteristic"
          }
        },
        "engagedParty" : {
          "$ref" : "#/definitions/PartyRefOrValue"
        },
        "relatedParty" : {
          "type" : "array",
          "description" : "Reference of the related party, could be a party reference or a party role reference. A new party can be added or can be removed. \n",
          "items" : {
            "$ref" : "#/definitions/RelatedPartyRef"
          }
        },
        "account" : {
          "type" : "array",
          "description" : "A account may be a party account or an account receivable.\n",
          "items" : {
            "$ref" : "#/definitions/AccountRefOrValue"
          }
        },
        "paymentMethod" : {
          "type" : "array",
          "description" : "A payment method defines a specific mean of payment (e.g direct debit).\n",
          "items" : {
            "$ref" : "#/definitions/PaymentMethodRef"
          }
        },
        "creditProfile" : {
          "type" : "array",
          "description" : "Credit profile for the party (containing credit scoring etc.). By default only the current credit profile is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one\n",
          "items" : {
            "$ref" : "#/definitions/CreditProfile"
          }
        },
        "contactMedium" : {
          "type" : "array",
          "description" : "Describes the contact medium characteristics that could be used to contact a Customer\n",
          "items" : {
            "$ref" : "#/definitions/ContactMedium"
          }
        }
      },
      "description" : "Customer resource\n"
    },
    "PartyRefOrValue" : {
      "type" : "object",
      "required" : [ "type" ],
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Type of the entity PartyRef/Organization/Individual in instance.\n"
        },
        "refType" : {
          "type" : "string",
          "description" : "Describes type of PartyRef. For example if type=PartyRef and refType=Individual then it means its a PartyRefOrValue instance is representing reference to Individual. This attribute is useful on cosumer side to deduce the type of PartyReference.\n"
        },
        "id" : {
          "type" : "string",
          "description" : "Unique identifier of an existing party.\nPatchable - No\n"
        },
        "href" : {
          "type" : "string",
          "description" : "Hypertext reference to the existing related party.\nPatchable - No\n"
        }
      },
      "description" : "This is base type which can represent either a reference (e.g. PartyRef) or a party value (e.g.IndividualValue). The exact type can be deduced  using type and refType attribute.\n"
    },
    "PartyRef" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PartyRefOrValue"
      }, {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of related party.\n"
          }
        }
      } ],
      "description" : "This represents  a reference to Engaged party.\n"
    },
    "AccountRefOrValue" : {
      "type" : "object",
      "required" : [ "type" ],
      "discriminator" : "type",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The unique identifier of an existing account.        \n"
        },
        "href" : {
          "type" : "string",
          "description" : "The hypertext reference to the related account.\n"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of related account.\n",
          "x-dox-pii" : "nameInfo:name"
        },
        "description" : {
          "type" : "string",
          "description" : "The description of account \n"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of resource - e.g. AccountRef/FinancialAccountValue/BillingAccountValue\n"
        },
        "preferred" : {
          "type" : "boolean",
          "description" : "Indicates if this is preferred account. Preferred account are used to for default processing. \nThis can be used for default logic.\n"
        },
        "refType" : {
          "type" : "string",
          "description" : "Describes type of AccountRef. For example if type=AccountRef and refType=FinancialAccount then it means its a PartyRefOrValue instance is representing reference to Financial acount. This attribute is useful on cosumer side to deduce the type of PartyReference.\n"
        }
      },
      "description" : "An account may be a party account or an account receivable.\n"
    },
    "AccountRef" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AccountRefOrValue"
      }, { } ],
      "description" : "This represents  a reference to Engaged party.\n"
    },
    "CreditProfile" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The unique identifier of an credit profile.\nPatchable - No\n"
        },
        "creditProfileDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date on which profile was established/created.\n",
          "x-dox-npi" : "creditProfileInfo:date"
        },
        "creditRiskRating" : {
          "type" : "integer",
          "description" : "This is an integer whose value is used to rate the risk.\n",
          "x-dox-npi" : "creditProfileInfo:rating"
        },
        "creditScore" : {
          "type" : "integer",
          "description" : "A measure of a person's or an organization's creditworthiness\ncalculated on the basis of a combination of factors such as their income and\ncredit history.\n",
          "x-dox-npi" : "creditProfileInfo:score"
        },
        "validFor" : {
          "$ref" : "#/definitions/TimePeriod"
        }
      },
      "description" : "Credit profile for the party (containing credit scoring, ...). By default only the current credit profile is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one.\n"
    },
    "FinancialAccountValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AccountRefOrValue"
      }, {
        "type" : "object",
        "properties" : {
          "contactMedium" : {
            "type" : "array",
            "description" : "Associated Contact Mediums \n",
            "items" : {
              "$ref" : "#/definitions/ContactMedium"
            }
          },
          "extensions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "properties" : { }
            },
            "x-amdocs" : {
              "refDefinition" : "FinancialAccountExtension"
            }
          }
        }
      } ],
      "description" : "Individual resource\n"
    },
    "BillingAccountValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AccountRefOrValue"
      }, {
        "type" : "object",
        "properties" : {
          "contactMedium" : {
            "type" : "array",
            "description" : "Associated Contact Mediums \n",
            "items" : {
              "$ref" : "#/definitions/ContactMedium"
            }
          },
          "extensions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "properties" : { }
            },
            "x-amdocs" : {
              "refDefinition" : "BillingAccountExtension"
            }
          }
        }
      } ],
      "description" : "Billing Account as Value. This would be useful when user wants to send specific values for FA creation.\n"
    },
    "ErrorResponse" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "The code associated with the error\n"
        },
        "message" : {
          "type" : "string",
          "description" : "The message associated with the error"
        },
        "traceId" : {
          "type" : "string",
          "description" : "A unique trace id used to correlate an error returned to a client with the server\n"
        }
      },
      "description" : "Response containing descriptive error text, error code\ntype: object\n"
    },
    "IndividualValue" : {
      "allOf" : [ {
        "$ref" : "#/definitions/PartyRefOrValue"
      }, {
        "type" : "object",
        "properties" : {
          "givenName" : {
            "type" : "string",
            "description" : "The first name of the individual\n",
            "x-dox-pii" : "nameInfo:name"
          },
          "middleName" : {
            "type" : "string",
            "description" : "The middle name of the individual\n",
            "x-dox-pii" : "nameInfo:name"
          },
          "familyName" : {
            "type" : "string",
            "description" : "The family name of the individual\n",
            "x-dox-pii" : "nameInfo:name"
          },
          "formattedName" : {
            "type" : "string",
            "description" : "The formatted name useful for specific contexts (Chinese,Japanese,Korean)\n",
            "x-dox-pii" : "nameInfo:name"
          },
          "fullName" : {
            "type" : "string",
            "description" : "The full name flatten (first,middle and last name flatten)\n",
            "x-dox-pii" : "nameInfo:name"
          },
          "preferredGivenName" : {
            "type" : "string",
            "description" : "The name preferred by individual\n",
            "x-dox-pii" : "nameInfo:name"
          },
          "birthDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date of birth of individual\n",
            "x-dox-pii" : "vitalInfo:date"
          },
          "countryOfBirth" : {
            "type" : "string",
            "description" : "The country of birth\n",
            "x-dox-pii" : "vitalInfo:placeOfBirth"
          },
          "deathDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date of death of individual\n",
            "x-dox-pii" : "vitalInfo:date"
          },
          "gender" : {
            "type" : "string",
            "description" : "The gender of the individual. \n",
            "x-dox-pii" : "vitalInfo:gender"
          },
          "location" : {
            "type" : "string",
            "description" : "The temporary current location of the individual (may be used if the individual has approved its sharing).\n"
          },
          "maritalStatus" : {
            "type" : "string",
            "description" : "The marital status of the individual ( Married,divorced etc.) \n",
            "x-dox-pii" : "vitalInfo:maritalStatus"
          },
          "nationality" : {
            "type" : "string",
            "description" : "The nationality of the individual. \n",
            "x-dox-pii" : "nationalityInfo:nationality"
          },
          "placeOfBirth" : {
            "type" : "string",
            "description" : "The place of the birth of the individual.\n",
            "x-dox-pii" : "vitalInfo:placeOfBirth"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the individual (active/inactive/obsolete etc.)\n"
          },
          "residencyType" : {
            "type" : "string",
            "description" : "The type of residency such as Rent,Own\n",
            "x-dox-pii" : "contactInfo:residencyType"
          },
          "title" : {
            "type" : "string",
            "description" : "The title like Pr,Dr,Sir etc.\n"
          },
          "language" : {
            "type" : "string",
            "description" : "The primary language of the individual.\n",
            "x-dox-pii" : "contactInfo:language"
          },
          "personRank" : {
            "type" : "integer",
            "description" : "The degree of importance of the person to the service provider.\n"
          },
          "profileImageURL" : {
            "type" : "string",
            "description" : "The published url for profile picture of Individual\n"
          },
          "contactMedium" : {
            "type" : "array",
            "description" : "The associated contact mediums.\n",
            "items" : {
              "$ref" : "#/definitions/ContactMedium"
            }
          },
          "identification" : {
            "type" : "array",
            "description" : "Represents information used as proof of identity by an individual (Passport/national identity card/SSN etc.)\n",
            "items" : {
              "$ref" : "#/definitions/IndividualIdentification"
            }
          },
          "extensions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "properties" : { }
            },
            "x-amdocs" : {
              "refDefinition" : "IndividualExtension"
            }
          }
        }
      } ],
      "description" : "Individual resource\n"
    },
    "Characteristics" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the characterstic\n"
        },
        "value" : {
          "type" : "string",
          "description" : "The value of the chracteristic\n"
        }
      },
      "description" : "Describes the characteristics of individual such as individual hobbies,center of interest etc\n"
    },
    "IndividualIdentification" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Unique identifier of the indentification\n"
        },
        "identificationId" : {
          "type" : "string",
          "description" : "Identification value like actual SSN , passport number and so on.\n",
          "x-dox-pii" : "governmentIdentityInfo:identification"
        },
        "issuingDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Issuing date of identification\n",
          "x-dox-pii" : "governmentIdentityInfo:date"
        },
        "validTill" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Expiry/Validity for date of indentification\n",
          "x-dox-pii" : "governmentIdentityInfo:date"
        },
        "issuingAuthority" : {
          "type" : "string",
          "description" : "Issuing authority like state, federal etc.\n",
          "x-dox-pii" : "governmentIdentityInfo:authority"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of identification like SSN,Passport etc.\n",
          "x-dox-pii" : "governmentIdentityInfo:type"
        },
        "primary" : {
          "type" : "boolean",
          "description" : "Indicates whether this identification is primary among several ones\n"
        },
        "extensions" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "properties" : { }
          },
          "x-amdocs" : {
            "refDefinition" : "IndividualIdentificationExtension"
          }
        }
      },
      "description" : "Represents our registration of information used as proof of identity by an individual (Passport/national identity card/SSN etc.).The uniqueness of Individual is decided based on identificationId and type.       \n"
    },
    "PatchElement" : {
      "properties" : {
        "op" : {
          "type" : "string",
          "description" : "The operation associated with this patched resource part. Valid values are 'add' or 'remove' or 'replace'.\n"
        },
        "path" : {
          "type" : "string",
          "description" : "The path of this resource part within the patched resource. For example, '/note' or '/name' or '/orderItem/quantity'.\n"
        },
        "value" : {
          "type" : "object",
          "description" : "The value of the patched resource part\n",
          "properties" : { }
        }
      },
      "description" : "The patched resource part\n"
    },
    "RelatedPartyRef" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Unique id of an existing party.\n"
        },
        "href" : {
          "type" : "string",
          "description" : "The self href for the existing related party.\n"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of related party.\n",
          "x-dox-pii" : "nameInfo:name"
        },
        "role" : {
          "type" : "string",
          "description" : "The role of related party\n"
        },
        "type" : {
          "type" : "string",
          "description" : "Describes if it's Customer/Individual/Organazation\nPatchable - No\n"
        },
        "validFor" : {
          "$ref" : "#/definitions/TimePeriod"
        }
      },
      "description" : "Contains reference to the related party.\n"
    },
    "TimePeriod" : {
      "type" : "object",
      "properties" : {
        "startDateTime" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The time period start date and time.\n"
        },
        "endDateTime" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The time period end date and time.\n"
        },
        "extension" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "properties" : { }
          },
          "x-amdocs" : {
            "refDefinition" : "TimePeriodExtension"
          }
        }
      },
      "description" : "Time period\n"
    },
    "MediumCharacteristic" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Type of medium (fax, mobile phone...).\n"
        },
        "emailAddress" : {
          "type" : "string",
          "description" : "The contact's email address for the ContactMedium type of email.\n",
          "x-dox-pii" : "contactInfo:email"
        },
        "number" : {
          "type" : "string",
          "description" : "The contact's phone number for Contact Medium type telephone number.\n",
          "x-dox-pii" : "contactInfo:telephoneNumber"
        },
        "city" : {
          "type" : "string",
          "description" : "The city name for the contact's address for Contact Medium type postal address.\n",
          "x-dox-pii" : "contactInfo:city"
        },
        "country" : {
          "type" : "string",
          "description" : "The country ISO code for the contact's address for Contact Medium type postal address.\n",
          "x-dox-pii" : "contactInfo:country"
        },
        "postCode" : {
          "type" : "string",
          "description" : "The postcode for the contact's address for Contact Medium type postal address.\n",
          "x-dox-pii" : "contactInfo:postCode"
        },
        "stateOrProvince" : {
          "type" : "string",
          "description" : "The state or province from contact's address for Contact Medium type postal address.\n",
          "x-dox-pii" : "contactInfo:state"
        },
        "street1" : {
          "type" : "string",
          "description" : "The first street line for the contact's address for Contact Medium type postal address.\n",
          "x-dox-pii" : "contactInfo:addressLine"
        },
        "street2" : {
          "type" : "string",
          "description" : "The second street line for the contact's address for Contact Medium type postal address.\n",
          "x-dox-pii" : "contactInfo:addressLine"
        },
        "place" : {
          "$ref" : "#/definitions/PlaceRef"
        },
        "extensions" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "properties" : { }
          },
          "x-amdocs" : {
            "refDefinition" : "MediumCharacteristicExtension"
          }
        }
      },
      "description" : "Medium information for customer(e.g. email address, mobile number,fax number). \n"
    },
    "PlaceRef" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Unique identifier of GeographicAddress,GeographicSubAddress or GeographicLocation\n"
        },
        "@referredType" : {
          "type" : "string",
          "description" : "Describes the type of entity such as GeographicAddress,GeographicSubAddress or GeographicLocation\n"
        },
        "@type" : {
          "type" : "string",
          "description" : "Describes the type of entity \n"
        },
        "subPlace" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SubPlaceRef"
          }
        }
      },
      "description" : "A place reference is a pointer to either GeographicAddress,GeographicSubAddress,GeographicLocation\n"
    },
    "SubPlaceRef" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Unique identifier of GeographicSubAddress\n"
        },
        "@referredType" : {
          "type" : "string",
          "description" : "Describes the type of entity such as GeographicAddress,GeographicSubAddress or GeographicLocation        \n"
        },
        "@type" : {
          "type" : "string",
          "description" : "Describes the type of entity \n"
        }
      },
      "description" : "A subplace reference is a pointer to either GeographicSubAddress\n"
    },
    "Error" : {
      "type" : "object",
      "required" : [ "code", "reason" ],
      "discriminator" : "@type",
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Error code relevant to an application, defined in the API or in a common list\n"
        },
        "reason" : {
          "type" : "string",
          "description" : "Explanation of the reason for the error that can be displayed to a user\n"
        },
        "message" : {
          "type" : "string",
          "description" : "Additional information about the error  and corrective actions related to the error that can be displayed to a user\n"
        },
        "status" : {
          "type" : "string",
          "description" : "HTTP error code extension\n"
        },
        "referenceError" : {
          "type" : "string",
          "format" : "uri",
          "description" : "URI of the documentation describing the error\n"
        },
        "traceId" : {
          "type" : "string",
          "description" : "Unique tracker ID that is used to facilitate the troubleshooting\n"
        },
        "@type" : {
          "type" : "string",
          "description" : "Type of the error\n"
        },
        "characteristic" : {
          "type" : "array",
          "description" : "Charachteristic parameters that are associated with the error\n",
          "items" : {
            "$ref" : "#/definitions/ErrorCharacteristic"
          }
        }
      },
      "description" : "Error response. This object is used when an API throws an error, typically with a HTTP error response codes 3xx, 4xx, and 5xx\n"
    },
    "ErrorCharacteristic" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Non-localized name identifier of the characteristic\n"
        },
        "value" : {
          "type" : "string",
          "description" : "Value of the characteristic\n"
        }
      },
      "description" : "Parameter that is associated with the error entity\n"
    },
    "ValidationError" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Error"
      }, {
        "properties" : {
          "validationMessage" : {
            "type" : "array",
            "description" : "The validation messages\n",
            "items" : {
              "$ref" : "#/definitions/ValidationMessage"
            }
          }
        }
      } ],
      "description" : "Validation error object that is used when an API throws an error, typically with a HTTP error response code 422\n"
    },
    "ValidationMessage" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Non-localized name identifier of the validation message\n"
        },
        "text" : {
          "type" : "string",
          "description" : "Localized descriptive validation message\n"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of the validation message\n"
        },
        "subtype" : {
          "type" : "string",
          "description" : "Distinct code which represents the issue\n"
        },
        "parameter" : {
          "type" : "array",
          "description" : "Name/value pair of the validation message\n",
          "items" : {
            "$ref" : "#/definitions/ValidationMessageParameter"
          }
        },
        "severity" : {
          "type" : "string",
          "description" : "Severity of the validation message\n"
        },
        "path" : {
          "type" : "string",
          "description" : "Path to the resource part to which the validation message is related\n"
        },
        "resource" : {
          "type" : "array",
          "description" : "Resource that is associated with the message\n",
          "items" : {
            "$ref" : "#/definitions/RelatedResource"
          }
        }
      },
      "description" : "Message associated with the validation failure\n"
    },
    "ValidationMessageParameter" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the parameter\n"
        },
        "value" : {
          "type" : "array",
          "description" : "Value of the parameter\n",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Name/value pair of the validation message parameter\n"
    },
    "RelatedResource" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Type of the resource\n"
        },
        "id" : {
          "type" : "string",
          "description" : "Unique identifier of the resource\n"
        },
        "variable" : {
          "type" : "array",
          "description" : "Variables related to the resource\n",
          "items" : {
            "$ref" : "#/definitions/Variable"
          }
        },
        "containedResource" : {
          "type" : "array",
          "description" : "Other resources, specs, or offers that are linked to the message but did not trigger the validation message\n",
          "items" : {
            "$ref" : "#/definitions/ContainedResource"
          }
        }
      },
      "description" : "Resource that is associated with the validation message (that is, triggered the validation failure)\n"
    },
    "Variable" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Type of the variable\n"
        },
        "id" : {
          "type" : "string",
          "description" : "Unique identifier of the variable\n"
        },
        "value" : {
          "type" : "array",
          "description" : "Value(s) of the variable\n",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Variable that is associated with a resource\n"
    },
    "ContainedResource" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Type of the resource\n"
        },
        "id" : {
          "type" : "string",
          "description" : "Unique identifier of the resource\n"
        },
        "variable" : {
          "type" : "array",
          "description" : "Variables that are related to the resource\n",
          "items" : {
            "$ref" : "#/definitions/Variable"
          }
        }
      },
      "description" : "Resources that are contained in the validation message\n"
    },
    "Characteristic" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "name of the characterstic\n"
        },
        "value" : {
          "type" : "string",
          "description" : "value of the chracteristic\n"
        }
      },
      "description" : "Describes the characteristics of customer such as customer hobbies,center of interest etc.\nIt's recommended not to store any senstive information (such as PII) to be persisted here.\n"
    },
    "PaymentMethodRef" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Unique id of an existing Payment Method.\nPatchable - No\n"
        },
        "href" : {
          "type" : "string",
          "description" : "Hypertext reference to the existing related Payment Method.\n"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of related Payment Method.\n",
          "x-dox-npi" : "paymentMethodInfo:name"
        },
        "type" : {
          "type" : "string",
          "description" : "Describes the type of Payment method like Credit Card, BankAccount etc.\n",
          "x-dox-npi" : "paymentMethodInfo:type"
        },
        "preferred" : {
          "type" : "boolean",
          "description" : "If the method is the preferred one by the owner. Typically used when querying for the payment methods of a specific customer or account.\n"
        },
        "validFor" : {
          "$ref" : "#/definitions/TimePeriod"
        }
      },
      "description" : "A payment method defines a specific mean of payment (e.g. direct debit/credit card)\n"
    },
    "ContactMedium" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Unique , auto-generated identifier\n"
        },
        "type" : {
          "type" : "string",
          "description" : "Contact medium type like email address, telephone number, postal address.\n"
        },
        "preferred" : {
          "type" : "boolean",
          "description" : "Indicator for preferred contact medium for communication\n"
        },
        "validFor" : {
          "$ref" : "#/definitions/TimePeriod"
        },
        "characteristic" : {
          "$ref" : "#/definitions/MediumCharacteristic"
        },
        "extensions" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "properties" : { }
          },
          "x-amdocs" : {
            "refDefinition" : "ContactMediumExtension"
          }
        }
      },
      "description" : "Contact medium associated to the customer (e.g. email address, telephone number etc). \n"
    }
  },
  "parameters" : {
    "path-customerId" : {
      "name" : "customerId",
      "in" : "path",
      "description" : "customer id\n",
      "required" : true,
      "type" : "string"
    }
  },
  "responses" : {
    "400-BadRequest" : {
      "description" : "*Bad Request* - The server cannot process the request due to malformed syntax. The response can be caused by missing mandatory query parameters, invalid value in the query parameters, validation exceptions, and so on.      \n",
      "schema" : {
        "$ref" : "#/definitions/ErrorResponse"
      }
    },
    "404-NotFound" : {
      "description" : "*Not Found* - The server did not find anything matching the request URI. The response can be caused by missing path parameters, invalid WEB resource, and so on.\n",
      "schema" : {
        "$ref" : "#/definitions/ErrorResponse"
      }
    },
    "409-Conflict" : {
      "description" : "*Conflict* - The server cannot complete the request due to a conflict with the current state of the resource.\nwith the current state of the resource.\n",
      "schema" : {
        "$ref" : "#/definitions/ErrorResponse"
      }
    },
    "500-InternalServerError" : {
      "description" : "*Internal Server Error* - The server encountered an unexpected condition that prevented it from fulfilling the request.\nclient request.\n",
      "schema" : {
        "$ref" : "#/definitions/ErrorResponse"
      }
    },
    "502-BadGateway" : {
      "description" : "*Bad Gateway* - The server encountered an unexpected condition when calling another service.\n",
      "schema" : {
        "$ref" : "#/definitions/ErrorResponse"
      }
    },
    "503-ServiceUnavailable" : {
      "description" : "*Service Unavailable* - The server cannot fulfill the request due to a temporary overloading or maintenance of the server. Retry later.\n",
      "schema" : {
        "$ref" : "#/definitions/ErrorResponse"
      }
    }
  },
  "x-dox-DesignDocs" : [ {
    "description" : "Customer MS\n",
    "url" : "TODO"
  } ]
}